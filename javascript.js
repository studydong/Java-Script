/* 연산자 형변환 값 예측하기 */

"" + 1 + 0
// 피연산자가 문자열인 경우에 덧셈은 문자열 병합 
// 출력 값 : "10"

"" - 1 + 0
// 피연산자가 문자열이지만 뺄셈이므로 문자열 병합 X , 뺄셈을 제외한 수학적연산은 피 연산자를 숫자형으로 변환한다.
//  "" 문자열은 숫자형으로 0 / 0 - 1 + 0 = -1
// 출력 값 : -1

true + false
// 피 연산자가 문자열이 아니기 때문에 덧셈 진행 , 논리형을 숫자형으로 변환 ( true : 1 / false : 0 )
// 1 + 0 = 1
// 출력 값 : 1

6 / "3"
// 문자열 "3을" 숫자형 3으로 변환
// 6 / 3 = 2
// 출력 값 : 2

"2" * "3"
// 두개의 문자열을 숫자형으로 형변환
// 2 * 3 = 6 
// 출력 값 : 6

4 + 5 + "px"
// 연산은 좌측부터 우측으로 진행 , 4+5 = 9 
// 피 연산자가 문자열이기 때문에 문자열로 병합 9+"px" = "9px"
// 출력 값 : "9px"

"$" + 4 + 5
// 피 연산자가 문자열이기 때문에 나머지도 문자열로 병합
// "$"+4+5 = "$45"
// 출력 값 : $45

"4" - 2
// 피 연산자가 문자열이지만 연산자가 뺄셈이므로, 문자열을 숫자형으로 형변환 (4)
// 4-2 = 2 
// 출력 값 : 2

"4px" - 2
// 피 연산자가 문자열이지만 연산자가 뺄셈이므로, 숫자형으로 형변환 => 형변환할 수 없음 오류발생 (NaN)
// NaN - 2 = NaN
// 출력 값 : NaN

7 / 0
// 어떤 숫자던 0으로 나누면 무한대가 됩니다.
// 7 / 0 = 0 or Infinity
// 출력 값 : Infinity

"  -9  " + 5
// 피 연산자가 문자열인경우에 덧셈은 문자열 병합
// " -9 " + 5 = " -9 5"
// 출력 값 : " -9 5"

"  -9  " - 5
// 피 연산자가 문자열이지만 뺼셈이므로, 문자열을 숫자형으로 형변환
// -9 - 5 = ( -9 + -5) -14
// 출력 값 : -14

null + 1
// 문자열이 아니므로, null 값을 수학적연산으로 인해 숫자형으로 형변환 (0)
// 0 + 1 = 1
// 출력 값 : 1

undefined + 1
// undefined는 정의되지 않은 값, 숫자형으로 형 변환할 수 없다. => 오류 반환 NaN
// NaN + 1 = NaN

" \t \n" - 2
// 피연산자가 문자열 , 산술적연산이 뺄셈이므로 숫자형으로 형변환 
// 문자열을 숫자형으로 형변환 할 때 맨앞과 맨뒤 공백은 제거 한다. => "\t \n" \t와 \n은 문자열이 아니다. 개행문자로 데이터의 위치를 조작한다.
// 데이터가 없으므로 형변환 시 0으로 간주, 0 - 2 = 2 
// 출력 값 : 2