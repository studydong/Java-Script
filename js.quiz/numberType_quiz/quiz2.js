/*퀴즈 2. Math.round와 toFixed는 둘 다 가장 가까운 어림수를 구해줍니다. 0..4는 버림하고, 5..9는 올림합니다.

alert( 1.35.toFixed(1) ); // 1.4
위 예시와 유사한 아래의 경우, 6.35가 6.4가 아닌 6.3으로 반올림되는 이유는 무엇일까요?

alert( 6.35.toFixed(1) ); // 6.3
어떻게 하면 6.35를 제대로 반올림할 수 있을까요?
*/

console.log( 1.35.toFixed(20) ); // 1.35~~~~ 
console.log( 6.35.toFixed(20) ); // 6.3999999~

/* 
1) 1.34 / 6.34 모두 소수부에 해당하는 0.35는 무한 소수로 2진법에서 무한대로 표시됩니다.
2) 즉 정밀도 손실이 발생해서, 반올림하면 수가 증가하거나 감소하게 됩니다.
3) 정밀도 손실을 눈으로 확인하기 위해서, 1.34과 6.34수를 길게 확인해보면 1.34은 1.350000~으로 표시되고
6.34는 6.34999~~로 표시 되기에, 반올림 되는 수가 5인 1.34만 정밀도 손실로 인해 반올림 시 숫자가 증가 됩니다.
*/


console.log( Math.round(6.35 * 10) / 10);

/*
1) 6.35은 무한소수기 때문에 정밀도 손실로 원하는 수로 반올림,내림할 수 없다. 무한 소수가 되지 않는 수로 만들어주자.
2) 6.35 * 10 = 63.5, 0.5는 무한 소수가 아니다. 
3) 6.35을 반올림하는 어림 수 내장함수를 호출하고, 64가되면 그 수를 다시 거듭제곱 한 숫자로 나눠서 6.4로 만들어준다.
*/